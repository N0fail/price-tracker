syntax = "proto3";

package ozon.dev.price_tracker.api;

option go_package = "gitlab.ozon.dev/N0fail/price-tracker/pkg/api";

import "api/google/api/annotations.proto";
// GRPC и REST api для Трэкер цен, который предполагает запись истории цен на какой то товар и просмотр этой истории

service Admin {
  // Создает продукт с переданным кодом и именем
  // может вернуть ошибки: ErrNameTooShortError, ErrProductExists
  rpc ProductCreate(ProductCreateRequest) returns (ProductCreateResponse) {
    option (google.api.http) = {
      post: "/v1/product"
      body: "*"
    };
  }

  // Возвращает список всех продуктов (код, имя, последняя цена(если есть))
  rpc ProductList(ProductListRequest) returns (ProductListResponse) {
    option (google.api.http) = {
      get: "/v1/product"
    };
  }

  // Удаляет продукт с переданным кодом
  // может вернуть ошибки: ErrProductNotExist
  rpc ProductDelete(ProductDeleteRequest) returns (ProductDeleteResponse) {
    option (google.api.http) = {
      delete: "/v1/product"
    };
  }

  // Добавляет цену для продукта с переданным кодом, дата передается в Unix формате
  // может вернуть ошибки: ErrProductNotExist, ErrNegativePrice
  rpc PriceTimeStampAdd(PriceTimeStampAddRequest) returns (PriceTimeStampAddResponse) {
    option (google.api.http) = {
      put: "/v1/price"
      body: "*"
    };
  }

  // Возвращает массив всех цен для продукта в хронологичеком порядке (принимает код продукта)
  // может вернуть ошибки: ErrProductNotExist
  rpc PriceHistory(PriceHistoryRequest) returns (PriceHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/price"
    };
  }
}

// Соотвествует модели продукта models.Product
message Product {
  string code = 1; // Код продукта
  string name = 2; // Название, должно быть не короче 4 символов
}

// Соотвествует модели продукта с ценой models.ProductSnapShot
// В случае, когда для продукта не было задано ни одной цены priceTimeStamp отсутствует
message ProductSnapShot {
  string code = 1; // Код продукта
  string name = 2; // Название
  PriceTimeStamp priceTimeStamp = 3; // Последняя цена и дата
}

// Соотвествует модели models.PriceTimeStamp
// Дата передается в Unix формате
message PriceTimeStamp {
  double price = 1; // Цена
  int64 ts    = 2;  // Дата в Unix формате
}

// ---------------------------------------------------------------------------------------------------------------------
// ProductCreate endpoint messages
// ---------------------------------------------------------------------------------------------------------------------

message ProductCreateRequest {
  string code     = 1; // Код продукта
  string name     = 2; // Название, должно быть не короче 4 символов
}
message ProductCreateResponse {}

// ---------------------------------------------------------------------------------------------------------------------
// ProductList endpoint messages
// ---------------------------------------------------------------------------------------------------------------------

message ProductListRequest {}
message ProductListResponse {
  repeated ProductSnapShot productSnapShots = 1;
}

// ---------------------------------------------------------------------------------------------------------------------
// ProductDelete endpoint messages
// ---------------------------------------------------------------------------------------------------------------------

message ProductDeleteRequest {
  string code = 1; // Код продукта, для удаления
}
message ProductDeleteResponse {}

// ---------------------------------------------------------------------------------------------------------------------
// AddPriceTimeStamp endpoint messages
// ---------------------------------------------------------------------------------------------------------------------

message PriceTimeStampAddRequest {
  string code = 1; // Код продукта
  int64 ts    = 2; // Дата в Unix формате
  double price = 3;// Цена
}
message PriceTimeStampAddResponse {}

// ---------------------------------------------------------------------------------------------------------------------
// PriceHistory endpoint messages
// ---------------------------------------------------------------------------------------------------------------------

message PriceHistoryRequest {
  string code = 1; // Код продукта, для которого хотим получить историю цен
}
message PriceHistoryResponse {
  repeated PriceTimeStamp priceHistory = 1;
}
