// Code generated by MockGen. DO NOT EDIT.
// Source: ./api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/N0fail/price-tracker/internal/pkg/core/product/models"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// PriceTimeStampAdd mocks base method.
func (m *MockInterface) PriceTimeStampAdd(ctx context.Context, code string, priceTimeStamp models.PriceTimeStamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PriceTimeStampAdd", ctx, code, priceTimeStamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PriceTimeStampAdd indicates an expected call of PriceTimeStampAdd.
func (mr *MockInterfaceMockRecorder) PriceTimeStampAdd(ctx, code, priceTimeStamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PriceTimeStampAdd", reflect.TypeOf((*MockInterface)(nil).PriceTimeStampAdd), ctx, code, priceTimeStamp)
}

// PriceHistory mocks base method.
func (m *MockInterface) PriceHistory(ctx context.Context, code string) (models.PriceHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PriceHistory", ctx, code)
	ret0, _ := ret[0].(models.PriceHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PriceHistory indicates an expected call of PriceHistory.
func (mr *MockInterfaceMockRecorder) PriceHistory(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PriceHistory", reflect.TypeOf((*MockInterface)(nil).PriceHistory), ctx, code)
}

// ProductCreate mocks base method.
func (m *MockInterface) ProductCreate(ctx context.Context, product models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductCreate", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductCreate indicates an expected call of ProductCreate.
func (mr *MockInterfaceMockRecorder) ProductCreate(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductCreate", reflect.TypeOf((*MockInterface)(nil).ProductCreate), ctx, product)
}

// ProductDelete mocks base method.
func (m *MockInterface) ProductDelete(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductDelete", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductDelete indicates an expected call of ProductDelete.
func (mr *MockInterfaceMockRecorder) ProductDelete(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductDelete", reflect.TypeOf((*MockInterface)(nil).ProductDelete), ctx, code)
}

// ProductList mocks base method.
func (m *MockInterface) ProductList(ctx context.Context, pageNumber, resultsPerPage uint32, orderBy string) ([]models.ProductSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductList", ctx, pageNumber, resultsPerPage, orderBy)
	ret0, _ := ret[0].([]models.ProductSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductList indicates an expected call of ProductList.
func (mr *MockInterfaceMockRecorder) ProductList(ctx, pageNumber, resultsPerPage, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductList", reflect.TypeOf((*MockInterface)(nil).ProductList), ctx, pageNumber, resultsPerPage, orderBy)
}
